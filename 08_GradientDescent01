{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "88170ecd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:44.893431Z",
     "iopub.status.busy": "2025-09-16T09:39:44.892737Z",
     "iopub.status.idle": "2025-09-16T09:39:46.667146Z",
     "shell.execute_reply": "2025-09-16T09:39:46.666222Z"
    },
    "papermill": {
     "duration": 1.784017,
     "end_time": "2025-09-16T09:39:46.668542",
     "exception": false,
     "start_time": "2025-09-16T09:39:44.884525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/social-network-ads/Social_Network_Ads.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d4a6d8da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:46.677291Z",
     "iopub.status.busy": "2025-09-16T09:39:46.676621Z",
     "iopub.status.idle": "2025-09-16T09:39:46.712555Z",
     "shell.execute_reply": "2025-09-16T09:39:46.711726Z"
    },
    "papermill": {
     "duration": 0.041872,
     "end_time": "2025-09-16T09:39:46.714287",
     "exception": false,
     "start_time": "2025-09-16T09:39:46.672415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Age  EstimatedSalary  Purchased\n",
      "0   19            19000          0\n",
      "1   35            20000          0\n",
      "2   26            43000          0\n",
      "3   27            57000          0\n",
      "4   19            76000          0\n"
     ]
    }
   ],
   "source": [
    "# import os\n",
    "\n",
    "# print(os.listdir(\"/kaggle/input/social-networking-ads-knn\"))\n",
    "# /kaggle/input/social-networking-ads-knn\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "df = pd.read_csv(\"/kaggle/input/social-network-ads/Social_Network_Ads.csv\")\n",
    "print(df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "049307b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:46.723325Z",
     "iopub.status.busy": "2025-09-16T09:39:46.722547Z",
     "iopub.status.idle": "2025-09-16T09:39:46.737410Z",
     "shell.execute_reply": "2025-09-16T09:39:46.736675Z"
    },
    "papermill": {
     "duration": 0.020444,
     "end_time": "2025-09-16T09:39:46.738629",
     "exception": false,
     "start_time": "2025-09-16T09:39:46.718185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>19000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>20000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27</td>\n",
       "      <td>57000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>76000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  EstimatedSalary  Purchased\n",
       "0   19            19000          0\n",
       "1   35            20000          0\n",
       "2   26            43000          0\n",
       "3   27            57000          0\n",
       "4   19            76000          0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4e39fe47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:46.747490Z",
     "iopub.status.busy": "2025-09-16T09:39:46.746885Z",
     "iopub.status.idle": "2025-09-16T09:39:46.751104Z",
     "shell.execute_reply": "2025-09-16T09:39:46.750375Z"
    },
    "papermill": {
     "duration": 0.009726,
     "end_time": "2025-09-16T09:39:46.752225",
     "exception": false,
     "start_time": "2025-09-16T09:39:46.742499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.iloc[:,0:2]\n",
    "y = df.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c9f29e5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:46.760108Z",
     "iopub.status.busy": "2025-09-16T09:39:46.759896Z",
     "iopub.status.idle": "2025-09-16T09:39:48.127437Z",
     "shell.execute_reply": "2025-09-16T09:39:48.126762Z"
    },
    "papermill": {
     "duration": 1.373242,
     "end_time": "2025-09-16T09:39:48.129061",
     "exception": false,
     "start_time": "2025-09-16T09:39:46.755819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler= StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f603eb1",
   "metadata": {
    "papermill": {
     "duration": 0.003429,
     "end_time": "2025-09-16T09:39:48.136448",
     "exception": false,
     "start_time": "2025-09-16T09:39:48.133019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fb0bfabc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:48.144860Z",
     "iopub.status.busy": "2025-09-16T09:39:48.144453Z",
     "iopub.status.idle": "2025-09-16T09:39:48.149811Z",
     "shell.execute_reply": "2025-09-16T09:39:48.149051Z"
    },
    "papermill": {
     "duration": 0.011152,
     "end_time": "2025-09-16T09:39:48.151133",
     "exception": false,
     "start_time": "2025-09-16T09:39:48.139981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400, 2)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_scaled.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6dc21b1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:48.159717Z",
     "iopub.status.busy": "2025-09-16T09:39:48.159450Z",
     "iopub.status.idle": "2025-09-16T09:39:48.256543Z",
     "shell.execute_reply": "2025-09-16T09:39:48.255861Z"
    },
    "papermill": {
     "duration": 0.10317,
     "end_time": "2025-09-16T09:39:48.258174",
     "exception": false,
     "start_time": "2025-09-16T09:39:48.155004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train , y_test =train_test_split(X,y, test_size =0.2 , random_state=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "24ee931c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:48.268028Z",
     "iopub.status.busy": "2025-09-16T09:39:48.267722Z",
     "iopub.status.idle": "2025-09-16T09:39:48.272913Z",
     "shell.execute_reply": "2025-09-16T09:39:48.272106Z"
    },
    "papermill": {
     "duration": 0.011341,
     "end_time": "2025-09-16T09:39:48.274418",
     "exception": false,
     "start_time": "2025-09-16T09:39:48.263077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(320, 2)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1f177c12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:48.283928Z",
     "iopub.status.busy": "2025-09-16T09:39:48.283555Z",
     "iopub.status.idle": "2025-09-16T09:39:48.287740Z",
     "shell.execute_reply": "2025-09-16T09:39:48.287009Z"
    },
    "papermill": {
     "duration": 0.010481,
     "end_time": "2025-09-16T09:39:48.289071",
     "exception": false,
     "start_time": "2025-09-16T09:39:48.278590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "555419d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:39:48.297743Z",
     "iopub.status.busy": "2025-09-16T09:39:48.297464Z",
     "iopub.status.idle": "2025-09-16T09:40:03.646667Z",
     "shell.execute_reply": "2025-09-16T09:40:03.645756Z"
    },
    "papermill": {
     "duration": 15.355179,
     "end_time": "2025-09-16T09:40:03.648193",
     "exception": false,
     "start_time": "2025-09-16T09:39:48.293014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-16 09:39:50.247625: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1758015590.469564      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1758015590.533235      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from keras import Sequential\n",
    "from keras.layers import Dense ,Input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "77d1425b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:40:03.657730Z",
     "iopub.status.busy": "2025-09-16T09:40:03.657142Z",
     "iopub.status.idle": "2025-09-16T09:40:03.742627Z",
     "shell.execute_reply": "2025-09-16T09:40:03.741702Z"
    },
    "papermill": {
     "duration": 0.091692,
     "end_time": "2025-09-16T09:40:03.744068",
     "exception": false,
     "start_time": "2025-09-16T09:40:03.652376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-16 09:40:03.666886: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Input(shape=(2,)))\n",
    "model.add(Dense(10,activation='relu'))\n",
    "model.add(Dense(10,activation='relu'))\n",
    "model.add(Dense(1,activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "62a916f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:40:03.753963Z",
     "iopub.status.busy": "2025-09-16T09:40:03.753552Z",
     "iopub.status.idle": "2025-09-16T09:40:03.768688Z",
     "shell.execute_reply": "2025-09-16T09:40:03.768017Z"
    },
    "papermill": {
     "duration": 0.021783,
     "end_time": "2025-09-16T09:40:03.769831",
     "exception": false,
     "start_time": "2025-09-16T09:40:03.748048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │            <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">110</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │            \u001b[38;5;34m30\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │           \u001b[38;5;34m110\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │            \u001b[38;5;34m11\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">151</span> (604.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m151\u001b[0m (604.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">151</span> (604.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m151\u001b[0m (604.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6cab84c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:40:03.779898Z",
     "iopub.status.busy": "2025-09-16T09:40:03.779630Z",
     "iopub.status.idle": "2025-09-16T09:40:03.783628Z",
     "shell.execute_reply": "2025-09-16T09:40:03.782844Z"
    },
    "papermill": {
     "duration": 0.01055,
     "end_time": "2025-09-16T09:40:03.785040",
     "exception": false,
     "start_time": "2025-09-16T09:40:03.774490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import time\n",
    "# model.compile(loss = 'binary_crossentropy',metrics =['accuracy'])\n",
    "# start = time.time()\n",
    "# history = model.fit(X_train, y_train, epochs =10 , batch_size =320)\n",
    "# print(time.time()-start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c757e406",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:40:03.795328Z",
     "iopub.status.busy": "2025-09-16T09:40:03.795038Z",
     "iopub.status.idle": "2025-09-16T09:40:10.073503Z",
     "shell.execute_reply": "2025-09-16T09:40:10.072624Z"
    },
    "papermill": {
     "duration": 6.285005,
     "end_time": "2025-09-16T09:40:10.074895",
     "exception": false,
     "start_time": "2025-09-16T09:40:03.789890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1ms/step - accuracy: 0.4008 - loss: 6752.0068\n",
      "Epoch 2/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4764 - loss: 150.9573\n",
      "Epoch 3/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4945 - loss: 138.7993\n",
      "Epoch 4/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5773 - loss: 128.0224\n",
      "Epoch 5/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4710 - loss: 173.2234\n",
      "Epoch 6/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5798 - loss: 106.0328\n",
      "Epoch 7/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5166 - loss: 134.7981\n",
      "Epoch 8/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4705 - loss: 133.3537\n",
      "Epoch 9/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4256 - loss: 157.3856\n",
      "Epoch 10/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4965 - loss: 142.8033\n",
      "6.261770248413086\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "model.compile(loss = 'binary_crossentropy',metrics =['accuracy'])\n",
    "start = time.time()\n",
    "history = model.fit(X_train, y_train, epochs =10 , batch_size =1)\n",
    "print(time.time()-start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "775abd23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:40:10.096362Z",
     "iopub.status.busy": "2025-09-16T09:40:10.095594Z",
     "iopub.status.idle": "2025-09-16T09:40:12.336884Z",
     "shell.execute_reply": "2025-09-16T09:40:12.335959Z"
    },
    "papermill": {
     "duration": 2.253353,
     "end_time": "2025-09-16T09:40:12.338539",
     "exception": false,
     "start_time": "2025-09-16T09:40:10.085186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step - accuracy: 0.7125 - loss: 0.6652 - val_accuracy: 0.3625 - val_loss: 0.8459\n",
      "Epoch 2/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 82ms/step - accuracy: 0.7125 - loss: 0.6606 - val_accuracy: 0.3625 - val_loss: 0.8436\n",
      "Epoch 3/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 85ms/step - accuracy: 0.7125 - loss: 0.6575 - val_accuracy: 0.3625 - val_loss: 0.8418\n",
      "Epoch 4/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 85ms/step - accuracy: 0.7125 - loss: 0.6550 - val_accuracy: 0.3625 - val_loss: 0.8402\n",
      "Epoch 5/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 85ms/step - accuracy: 0.7125 - loss: 0.6528 - val_accuracy: 0.3625 - val_loss: 0.8388\n",
      "Epoch 6/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 85ms/step - accuracy: 0.7125 - loss: 0.6508 - val_accuracy: 0.3625 - val_loss: 0.8375\n",
      "Epoch 7/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step - accuracy: 0.7125 - loss: 0.6490 - val_accuracy: 0.3625 - val_loss: 0.8363\n",
      "Epoch 8/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 86ms/step - accuracy: 0.7125 - loss: 0.6474 - val_accuracy: 0.3625 - val_loss: 0.8351\n",
      "Epoch 9/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 85ms/step - accuracy: 0.7125 - loss: 0.6458 - val_accuracy: 0.3625 - val_loss: 0.8341\n",
      "Epoch 10/10\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 84ms/step - accuracy: 0.7125 - loss: 0.6442 - val_accuracy: 0.3625 - val_loss: 0.8330\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "model.compile(loss = 'binary_crossentropy',metrics =['accuracy'])\n",
    "# start = time.time()\n",
    "history = model.fit(X_scaled, y, epochs =10 , batch_size =400, validation_split = 0.2)\n",
    "# print(time.time()-start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "693292b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-16T09:40:12.361859Z",
     "iopub.status.busy": "2025-09-16T09:40:12.361541Z",
     "iopub.status.idle": "2025-09-16T09:40:19.872294Z",
     "shell.execute_reply": "2025-09-16T09:40:19.871539Z"
    },
    "papermill": {
     "duration": 7.524078,
     "end_time": "2025-09-16T09:40:19.873863",
     "exception": false,
     "start_time": "2025-09-16T09:40:12.349785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.7218 - loss: 0.6151 - val_accuracy: 0.3625 - val_loss: 0.8249\n",
      "Epoch 2/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6960 - loss: 0.5482 - val_accuracy: 0.3625 - val_loss: 0.7800\n",
      "Epoch 3/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6867 - loss: 0.4697 - val_accuracy: 0.5250 - val_loss: 0.6696\n",
      "Epoch 4/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8077 - loss: 0.3574 - val_accuracy: 0.7375 - val_loss: 0.5590\n",
      "Epoch 5/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8225 - loss: 0.3523 - val_accuracy: 0.7500 - val_loss: 0.4792\n",
      "Epoch 6/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8387 - loss: 0.3039 - val_accuracy: 0.7500 - val_loss: 0.4495\n",
      "Epoch 7/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8449 - loss: 0.2781 - val_accuracy: 0.7875 - val_loss: 0.4131\n",
      "Epoch 8/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8515 - loss: 0.2971 - val_accuracy: 0.8125 - val_loss: 0.3831\n",
      "Epoch 9/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8763 - loss: 0.2693 - val_accuracy: 0.8750 - val_loss: 0.3536\n",
      "Epoch 10/10\n",
      "\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8393 - loss: 0.3243 - val_accuracy: 0.8875 - val_loss: 0.3361\n"
     ]
    }
   ],
   "source": [
    "#stochatic batch size 1\n",
    "import time\n",
    "model.compile(loss = 'binary_crossentropy',metrics =['accuracy'])\n",
    "# start = time.time()\n",
    "history = model.fit(X_scaled, y, epochs =10 , batch_size =1, validation_split = 0.2)\n",
    "# print(time.time()-start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2420aca3",
   "metadata": {
    "papermill": {
     "duration": 0.015852,
     "end_time": "2025-09-16T09:40:19.906750",
     "exception": false,
     "start_time": "2025-09-16T09:40:19.890898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70e62fbd",
   "metadata": {
    "papermill": {
     "duration": 0.015658,
     "end_time": "2025-09-16T09:40:19.938319",
     "exception": false,
     "start_time": "2025-09-16T09:40:19.922661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dff3eb8d",
   "metadata": {
    "papermill": {
     "duration": 0.015479,
     "end_time": "2025-09-16T09:40:19.969674",
     "exception": false,
     "start_time": "2025-09-16T09:40:19.954195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf4b4bdc",
   "metadata": {
    "papermill": {
     "duration": 0.015553,
     "end_time": "2025-09-16T09:40:20.001114",
     "exception": false,
     "start_time": "2025-09-16T09:40:19.985561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1394586,
     "sourceId": 2311467,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 43.451669,
   "end_time": "2025-09-16T09:40:23.429285",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-16T09:39:39.977616",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
