{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2311467,"sourceType":"datasetVersion","datasetId":1394586}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:25.913155Z","iopub.execute_input":"2025-09-15T11:26:25.913990Z","iopub.status.idle":"2025-09-15T11:26:25.927690Z","shell.execute_reply.started":"2025-09-15T11:26:25.913962Z","shell.execute_reply":"2025-09-15T11:26:25.926782Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/social-network-ads/Social_Network_Ads.csv\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"# import os\n\n# print(os.listdir(\"/kaggle/input/social-networking-ads-knn\"))\n# /kaggle/input/social-networking-ads-knn\nimport pandas as pd\n\n\ndf = pd.read_csv(\"/kaggle/input/social-network-ads/Social_Network_Ads.csv\")\nprint(df.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:26.323709Z","iopub.execute_input":"2025-09-15T11:26:26.324574Z","iopub.status.idle":"2025-09-15T11:26:26.333980Z","shell.execute_reply.started":"2025-09-15T11:26:26.324542Z","shell.execute_reply":"2025-09-15T11:26:26.333194Z"}},"outputs":[{"name":"stdout","text":"   Age  EstimatedSalary  Purchased\n0   19            19000          0\n1   35            20000          0\n2   26            43000          0\n3   27            57000          0\n4   19            76000          0\n","output_type":"stream"}],"execution_count":36},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:26.578787Z","iopub.execute_input":"2025-09-15T11:26:26.579404Z","iopub.status.idle":"2025-09-15T11:26:26.588200Z","shell.execute_reply.started":"2025-09-15T11:26:26.579376Z","shell.execute_reply":"2025-09-15T11:26:26.587379Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"   Age  EstimatedSalary  Purchased\n0   19            19000          0\n1   35            20000          0\n2   26            43000          0\n3   27            57000          0\n4   19            76000          0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>EstimatedSalary</th>\n      <th>Purchased</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>19000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>35</td>\n      <td>20000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26</td>\n      <td>43000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>27</td>\n      <td>57000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>19</td>\n      <td>76000</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"X = df.iloc[:,0:2]\ny = df.iloc[:,-1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:26.768402Z","iopub.execute_input":"2025-09-15T11:26:26.768762Z","iopub.status.idle":"2025-09-15T11:26:26.774057Z","shell.execute_reply.started":"2025-09-15T11:26:26.768737Z","shell.execute_reply":"2025-09-15T11:26:26.773063Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nX_scaled = scaler.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:26.958355Z","iopub.execute_input":"2025-09-15T11:26:26.958674Z","iopub.status.idle":"2025-09-15T11:26:26.967044Z","shell.execute_reply.started":"2025-09-15T11:26:26.958619Z","shell.execute_reply":"2025-09-15T11:26:26.965976Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_scaled.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:27.492003Z","iopub.execute_input":"2025-09-15T11:26:27.492776Z","iopub.status.idle":"2025-09-15T11:26:27.498575Z","shell.execute_reply.started":"2025-09-15T11:26:27.492746Z","shell.execute_reply":"2025-09-15T11:26:27.497704Z"}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"(400, 2)"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"# from sklearn.model_selection import train_test_split\n# X_train, X_test, y_train , y_test =train_test_split(X,y, test_size =0.2 , random_state=2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:27.517686Z","iopub.execute_input":"2025-09-15T11:26:27.518450Z","iopub.status.idle":"2025-09-15T11:26:27.522469Z","shell.execute_reply.started":"2025-09-15T11:26:27.518418Z","shell.execute_reply":"2025-09-15T11:26:27.521426Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"X_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:27.548248Z","iopub.execute_input":"2025-09-15T11:26:27.549023Z","iopub.status.idle":"2025-09-15T11:26:27.554551Z","shell.execute_reply.started":"2025-09-15T11:26:27.548995Z","shell.execute_reply":"2025-09-15T11:26:27.553774Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"(320, 2)"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras import Sequential\nfrom keras.layers import Dense ,Input","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:27.577459Z","iopub.execute_input":"2025-09-15T11:26:27.577806Z","iopub.status.idle":"2025-09-15T11:26:27.582542Z","shell.execute_reply.started":"2025-09-15T11:26:27.577783Z","shell.execute_reply":"2025-09-15T11:26:27.581798Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"model = Sequential()\nmodel.add(Input(shape=(2,)))\nmodel.add(Dense(10,activation='relu'))\nmodel.add(Dense(10,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:27:29.606392Z","iopub.execute_input":"2025-09-15T11:27:29.606827Z","iopub.status.idle":"2025-09-15T11:27:29.642318Z","shell.execute_reply.started":"2025-09-15T11:27:29.606801Z","shell.execute_reply":"2025-09-15T11:27:29.641429Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"# model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:27.645873Z","iopub.execute_input":"2025-09-15T11:26:27.646175Z","iopub.status.idle":"2025-09-15T11:26:27.650017Z","shell.execute_reply.started":"2025-09-15T11:26:27.646155Z","shell.execute_reply":"2025-09-15T11:26:27.649293Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"# import time\n# model.compile(loss = 'binary_crossentropy',metrics =['accuracy'])\n# start = time.time()\n# history = model.fit(X_train, y_train, epochs =10 , batch_size =320)\n# print(time.time()-start)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:27.669480Z","iopub.execute_input":"2025-09-15T11:26:27.670056Z","iopub.status.idle":"2025-09-15T11:26:27.673796Z","shell.execute_reply.started":"2025-09-15T11:26:27.670029Z","shell.execute_reply":"2025-09-15T11:26:27.672968Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"# import time\n# model.compile(loss = 'binary_crossentropy',metrics =['accuracy'])\n# start = time.time()\n# history = model.fit(X_train, y_train, epochs =10 , batch_size =1)\n# print(time.time()-start)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:27.700099Z","iopub.execute_input":"2025-09-15T11:26:27.701023Z","iopub.status.idle":"2025-09-15T11:26:27.704712Z","shell.execute_reply.started":"2025-09-15T11:26:27.700949Z","shell.execute_reply":"2025-09-15T11:26:27.703855Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"import time\nmodel.compile(loss = 'binary_crossentropy',metrics =['accuracy'])\n# start = time.time()\nhistory = model.fit(X_scaled, y, epochs =10 , batch_size =400, validation_split = 0.2)\n# print(time.time()-start)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:26:40.247700Z","iopub.execute_input":"2025-09-15T11:26:40.248000Z","iopub.status.idle":"2025-09-15T11:26:42.554487Z","shell.execute_reply.started":"2025-09-15T11:26:40.247979Z","shell.execute_reply":"2025-09-15T11:26:42.553698Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step - accuracy: 0.2875 - loss: 0.7161 - val_accuracy: 0.6375 - val_loss: 0.5769\nEpoch 2/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 89ms/step - accuracy: 0.2844 - loss: 0.7079 - val_accuracy: 0.6500 - val_loss: 0.5756\nEpoch 3/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 86ms/step - accuracy: 0.2875 - loss: 0.7022 - val_accuracy: 0.6500 - val_loss: 0.5745\nEpoch 4/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 86ms/step - accuracy: 0.2906 - loss: 0.6975 - val_accuracy: 0.6500 - val_loss: 0.5733\nEpoch 5/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step - accuracy: 0.2906 - loss: 0.6933 - val_accuracy: 0.6500 - val_loss: 0.5722\nEpoch 6/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step - accuracy: 0.3125 - loss: 0.6896 - val_accuracy: 0.6625 - val_loss: 0.5711\nEpoch 7/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step - accuracy: 0.3187 - loss: 0.6861 - val_accuracy: 0.6625 - val_loss: 0.5702\nEpoch 8/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 88ms/step - accuracy: 0.3250 - loss: 0.6828 - val_accuracy: 0.6625 - val_loss: 0.5692\nEpoch 9/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 90ms/step - accuracy: 0.3344 - loss: 0.6798 - val_accuracy: 0.6750 - val_loss: 0.5684\nEpoch 10/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 85ms/step - accuracy: 0.3438 - loss: 0.6768 - val_accuracy: 0.6875 - val_loss: 0.5674\n","output_type":"stream"}],"execution_count":49},{"cell_type":"code","source":"#stochatic batch size 1\nimport time\nmodel.compile(loss = 'binary_crossentropy',metrics =['accuracy'])\n# start = time.time()\nhistory = model.fit(X_scaled, y, epochs =10 , batch_size =1, validation_split = 0.2)\n# print(time.time()-start)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T11:27:33.253279Z","iopub.execute_input":"2025-09-15T11:27:33.254079Z","iopub.status.idle":"2025-09-15T11:27:41.413964Z","shell.execute_reply.started":"2025-09-15T11:27:33.254046Z","shell.execute_reply":"2025-09-15T11:27:41.413174Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.5026 - loss: 0.7009 - val_accuracy: 0.6625 - val_loss: 0.6307\nEpoch 2/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8173 - loss: 0.5347 - val_accuracy: 0.6125 - val_loss: 0.6363\nEpoch 3/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8392 - loss: 0.3920 - val_accuracy: 0.6375 - val_loss: 0.6172\nEpoch 4/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8602 - loss: 0.3018 - val_accuracy: 0.7125 - val_loss: 0.5038\nEpoch 5/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8417 - loss: 0.3228 - val_accuracy: 0.7625 - val_loss: 0.4388\nEpoch 6/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8714 - loss: 0.2603 - val_accuracy: 0.8000 - val_loss: 0.3745\nEpoch 7/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8595 - loss: 0.2688 - val_accuracy: 0.9000 - val_loss: 0.3273\nEpoch 8/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8802 - loss: 0.2545 - val_accuracy: 0.9500 - val_loss: 0.2735\nEpoch 9/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8738 - loss: 0.2738 - val_accuracy: 0.9750 - val_loss: 0.2491\nEpoch 10/10\n\u001b[1m320/320\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8912 - loss: 0.2422 - val_accuracy: 0.9750 - val_loss: 0.2252\n","output_type":"stream"}],"execution_count":51},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}